<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="test.spring.mvc.repository.ReviewMapper">
<<<<<<< HEAD
	<!-- 리뷰 글 작성 -->
	<select id ="writeproduct" parameterType="test.spring.mvc.bean.ReviewDTO" resultType="test.spring.mvc.bean.ReviewDTO">
		SELECT ap.boardname,
	       api.companyid || api.category || api.category2 || api.flavor || 'F' || api.num || api.ext AS filename
			FROM all_product ap
			JOIN all_productimg api ON ap.companyid = api.companyid
			                        AND ap.category = api.category
			                        AND ap.category2 = api.category2
			                        AND ap.flavor = api.flavor
			WHERE ap.companyid = #{companyid}
			      AND ap.category = #{category}
			      AND ap.category2 = #{category2}
			      AND ap.flavor = #{flavor}
			      AND api.thum = 1
			ORDER BY api.num ASC
			FETCH FIRST ROW ONLY
	</select>
	<!-- 리뷰 전체 목록 -->
=======
	
>>>>>>> branch 'main' of https://github.com/rladbwls1/dietfit.git
	<select id = "listimg" resultType="test.spring.mvc.bean.ReviewDTO">
		SELECT r.*, a.*, ap.boardname
			FROM review r
			LEFT JOIN (
			    SELECT allimg.*, min_allimg.min_num
			    FROM allimg
			    JOIN (
			        SELECT notifynum, MIN(num) AS min_num
			        FROM allimg
			        WHERE type = 4
			        GROUP BY notifynum
			    ) min_allimg ON allimg.notifynum = min_allimg.notifynum AND allimg.num = min_allimg.min_num
			) a ON r.num = a.notifynum
			LEFT JOIN all_product ap ON r.companyid = ap.companyid 
			                          AND r.category = ap.category 
			                          AND r.category2 = ap.category2 
			                          AND r.flavor = ap.flavor
			ORDER BY r.num ASC
	</select>
	
	<!-- 리뷰 글 -->
	<insert id = "write" parameterType="test.spring.mvc.bean.ReviewDTO">
		insert into review (num, companyid, category, category2, flavor, id, writer, starscore,content,isfile,reg) 
			values (review_seq.nextval, #{companyid}, #{category}, #{category2}, #{flavor}, #{id}, #{writer}, #{starscore}, #{content}, #{isfile}, sysdate)
	</insert>
	<!-- 리뷰 이미지 저장 -->
	<insert id = "writeimg" parameterType="test.spring.mvc.bean.AllimgDTO">
		<selectKey keyProperty="notifynum" resultType="int" order="BEFORE">
	        select review_seq.CURRVAL as notifynum from dual
	    </selectKey>
		insert into allimg (num, id, type, notifynum, attatch) values(allimg_SEQ.nextval, #{id}, 4, #{notifynum}, #{attatch})
	</insert>
	<!-- 리뷰 글 수정 -->
	<update id = "reviewupdate">
	
	</update>
	<!-- 리뷰 이미지 수정 -->
	<update id = "reviewupdateimg">
		
	</update>
	<!-- 리뷰 글 삭제 -->
	<delete id = "reviewdelete">
		delete from review where num = #{num}
	</delete>
	<!-- 리뷰 이미지 삭제 -->
	<delete id = "reviewimgdelete">
		delete from allimg where notifynum = #{notifynum} 
	</delete>

	<!-- 리뷰 추천 아이디별로 찾기 -->
	<select id = "recommend" parameterType="test.spring.mvc.bean.RecommendDTO">
		select * from review_recommed where id = #{id}
	</select>
	
	<!-- 리뷰 추천함 -->
	<insert id = "good" parameterType="test.spring.mvc.bean.RecommendDTO">
		insert into review_recommed (reviewnum, id) values(#{reviewnum},#{id})
	</insert>
	<!-- 리뷰 상세 추천함 추가 -->
	<update id="goodreview">
		UPDATE review set recommend = recommend + 1 WHERE num = #{num};
	</update>
	
	<!-- 리뷰 추천 취소 -->
	<delete id = "bye" parameterType="test.spring.mvc.bean.RecommendDTO">
		delete from all_productimg where reviewnum=#{reviewnum} and id =#{id}
	</delete>
</mapper>